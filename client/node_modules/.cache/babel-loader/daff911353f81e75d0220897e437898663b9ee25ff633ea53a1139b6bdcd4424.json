{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Pastas\\\\Serious Things\\\\Folder_Developer\\\\React\\\\Site_Pizzaria\\\\client\\\\src\\\\context\\\\auth.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [client, setClient] = useState();\n  const register = (userName, userEmail, userPassword, userContact) => {\n    api.post('/clients', {\n      name: userName,\n      email: userEmail,\n      password: userPassword,\n      contact: userContact\n    }).then(response => {\n      if (_.contains(err.message, 'duplicate key error') && _.contains(err.message, 'users.$email')) {\n        err = new Error('This email is already registered');\n        err.status = 400;\n      }\n      throw err;\n      console.log(response);\n    }).catch(err => {});\n  };\n  const login = (userEmail, userPassword) => {\n    api.get('/clients').then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      data.map(item => {\n        if (item.email === userEmail && item.password === userPassword) {\n          setClient({\n            userEmail,\n            userPassword\n          });\n        } else {\n          console.log({\n            message: \"Usuário não encontrado.\"\n          });\n        }\n        return console.log(\"Estou no map\");\n      });\n    });\n  };\n  const logout = () => {\n    setClient(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      client,\n      loginOK: !!client,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"jBeftI3Q+GrQvd7t6mthxLZMxhM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","client","setClient","register","userName","userEmail","userPassword","userContact","post","name","email","password","contact","then","response","_","contains","err","message","Error","status","console","log","catch","login","get","_ref2","data","map","item","logout","Provider","value","loginOK","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Pastas/Serious Things/Folder_Developer/React/Site_Pizzaria/client/src/context/auth.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\n\r\nimport api from \"../services/api\";\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [client, setClient] = useState()\r\n\r\n    const register = (userName, userEmail, userPassword, userContact) => {\r\n        \r\n        api.post('/clients', {\r\n            name: userName,\r\n            email: userEmail,\r\n            password: userPassword,\r\n            contact: userContact\r\n        }).then((response) => {\r\n            if(_.contains(err.message, 'duplicate key error') &&\r\n   _.contains(err.message, 'users.$email')) {\r\n  err = new Error('This email is already registered');\r\n  err.status = 400;\r\n}\r\n\r\nthrow err;\r\n            console.log(response)\r\n        }).catch((err) => {\r\n            \r\n        })\r\n\r\n    }\r\n\r\n    const login = (userEmail, userPassword) => {  \r\n        api.get('/clients')\r\n        .then(({ data }) => {\r\n            data.map((item) => {    \r\n                if(item.email === userEmail && item.password === userPassword){\r\n                    setClient({ userEmail, userPassword })\r\n                } else {\r\n                    console.log({message: \"Usuário não encontrado.\"})\r\n                }\r\n                return(\r\n                    console.log(\"Estou no map\")\r\n                )\r\n            })\r\n        })\r\n    }\r\n\r\n    const logout = () => {\r\n        setClient(null);\r\n    }\r\n    \r\n    return(\r\n        <AuthContext.Provider value={{client, loginOK: !!client, login, register, logout}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAE/C,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC,CAAC,CAAC;AAE5C,OAAO,MAAMM,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACrC,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,EAAE;EAEtC,MAAMW,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,EAAEC,WAAW,KAAK;IAEjEd,GAAG,CAACe,IAAI,CAAC,UAAU,EAAE;MACjBC,IAAI,EAAEL,QAAQ;MACdM,KAAK,EAAEL,SAAS;MAChBM,QAAQ,EAAEL,YAAY;MACtBM,OAAO,EAAEL;IACb,CAAC,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAGC,CAAC,CAACC,QAAQ,CAACC,GAAG,CAACC,OAAO,EAAE,qBAAqB,CAAC,IAC1DH,CAAC,CAACC,QAAQ,CAACC,GAAG,CAACC,OAAO,EAAE,cAAc,CAAC,EAAE;QAC1CD,GAAG,GAAG,IAAIE,KAAK,CAAC,kCAAkC,CAAC;QACnDF,GAAG,CAACG,MAAM,GAAG,GAAG;MAClB;MAEA,MAAMH,GAAG;MACGI,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;IACzB,CAAC,CAAC,CAACS,KAAK,CAAEN,GAAG,IAAK,CAElB,CAAC,CAAC;EAEN,CAAC;EAED,MAAMO,KAAK,GAAGA,CAACnB,SAAS,EAAEC,YAAY,KAAK;IACvCb,GAAG,CAACgC,GAAG,CAAC,UAAU,CAAC,CAClBZ,IAAI,CAACa,KAAA,IAAc;MAAA,IAAb;QAAEC;MAAK,CAAC,GAAAD,KAAA;MACXC,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;QACf,IAAGA,IAAI,CAACnB,KAAK,KAAKL,SAAS,IAAIwB,IAAI,CAAClB,QAAQ,KAAKL,YAAY,EAAC;UAC1DJ,SAAS,CAAC;YAAEG,SAAS;YAAEC;UAAa,CAAC,CAAC;QAC1C,CAAC,MAAM;UACHe,OAAO,CAACC,GAAG,CAAC;YAACJ,OAAO,EAAE;UAAyB,CAAC,CAAC;QACrD;QACA,OACIG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAEnC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAED,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACjB5B,SAAS,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,oBACIP,OAAA,CAACC,WAAW,CAACmC,QAAQ;IAACC,KAAK,EAAE;MAAC/B,MAAM;MAAEgC,OAAO,EAAE,CAAC,CAAChC,MAAM;MAAEuB,KAAK;MAAErB,QAAQ;MAAE2B;IAAM,CAAE;IAAA9B,QAAA,EAC7EA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACU;AAG/B,CAAC;AAAAtC,EAAA,CAnDYF,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}